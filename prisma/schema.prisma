generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String?
  createdAt    DateTime  @default(now())
  messages     Message[] 
  chats        ChatParticipant[]
  aiBindings   AiChatBinding[]   
}

model Chat {
  id           Int       @id @default(autoincrement())
  type         ChatType  // "PRIVATE" –∏–ª–∏ "GROUP"
  title        String?
  createdAt    DateTime  @default(now())
  messages     Message[]
  participants ChatParticipant[]
  aiBindings   AiChatBinding[]   
}

model ChatParticipant {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  chat      Chat      @relation(fields: [chatId], references: [id])
  chatId    Int
  joinedAt  DateTime  @default(now())

  @@unique([userId, chatId]) // —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  createdAt DateTime @default(now())
}

model AiChatBinding {
  id           Int     @id @default(autoincrement())
  userId       Int
  chatId       Int
  enabled      Boolean @default(true)
  mode         AiMode  @default(ADVISOR)
  customPrompt String? // üëà –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç —é–∑–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  threadId     String?

  user User    @relation(fields: [userId], references: [id])
  chat Chat    @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

enum AiMode {
  ADVISOR     // —Å–æ–≤–µ—Ç—á–∏–∫
  AUTO_REPLY  // –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
}

enum ChatType {
  PRIVATE
  GROUP
}